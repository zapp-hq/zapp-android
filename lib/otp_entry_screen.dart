import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:async'; // Added for Timer
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'crypto_utils.dart'; // Ensure this path is correct
import 'storage_service.dart'; // Ensure this path is correct

/// Server URL constant
const String serverBaseUrl =
    'https://zapp-tiny-infra-626368525195.europe-west1.run.app';

// Enum to define the current mode of the linking screen
enum _LinkMode { enterOtp, generateOtp }

/// OTP Entry Screen for linking devices using temporary codes
/// Handles secure device pairing with public key exchange
class OTPEntryScreen extends StatefulWidget {
  const OTPEntryScreen({super.key});

  @override
  State<OTPEntryScreen> createState() => _OTPEntryScreenState();
}

class _OTPEntryScreenState extends State<OTPEntryScreen> {
  final TextEditingController _otpController = TextEditingController();
  bool _isConnecting = false;
  String _statusMessage = 'Enter OTP from the other device.';
  String? _localFingerprint;
  Map<String, dynamic>? _localKeyPair;

  _LinkMode _currentMode = _LinkMode.enterOtp; // New state variable for mode
  String? _generatedOTP; // To store OTP generated by this device
  DateTime? _otpGenerationTime; // To track when OTP was generated
  Duration _otpRemainingTime = Duration.zero; // For countdown display
  Timer? _countdownTimer; // Timer for OTP countdown

  @override
  void initState() {
    super.initState();
    _loadLocalKeyPair(); // Load key pair to get fingerprint and public key
  }

  @override
  void dispose() {
    _otpController.dispose();
    _countdownTimer?.cancel(); // Cancel timer to prevent memory leaks
    super.dispose();
  }

  /// Load local device key pair and fingerprint for display and API calls
  Future<void> _loadLocalKeyPair() async {
    try {
      final keyPair = await StorageService.loadKeyPair();
      if (keyPair != null) {
        setState(() {
          _localKeyPair = keyPair;
          _localFingerprint = keyPair['fingerprint'] as String;
        });
      } else {
        setState(() {
          _statusMessage =
              'Error: No local keys found. Please return to setup.';
        });
      }
    } catch (e) {
      setState(() {
        _statusMessage = 'Error loading local keys: ${e.toString().split(':').first}';
      });
      _showError('Failed to load local keys: ${e.toString().split(':').first}');
    }
  }

  /// Initiates the linking process by requesting an OTP from the server.
  Future<void> _generateAndDisplayOTP() async {
    if (_localKeyPair == null || _localFingerprint == null) {
      _showError('Local device information not loaded.');
      setState(() {
        _isConnecting = false; // Ensure not stuck in connecting state
        _statusMessage = 'Failed: Local keys not available.';
      });
      return;
    }

    setState(() {
      _isConnecting = true;
      _statusMessage = 'Requesting OTP from server...';
      _generatedOTP = null; // Clear previous OTP display
      _otpRemainingTime = Duration.zero; // Reset countdown
      _countdownTimer?.cancel(); // Cancel any existing timer
    });

    try {
      final localPublicKeyBase64 =
          CryptoUtils.publicKeyToBase64(_localKeyPair!['publicKey']);

      final Map<String, dynamic> requestBody = {
        "device_name": "Android Zapp!", // TODO: Make this dynamic
        "public_key": localPublicKeyBase64,
        "fingerprint": _localFingerprint!,
      };

      if (kDebugMode) {
        print('Sending /link/initiate request: ${json.encode(requestBody)}');
      }

      final response = await http.post(
        Uri.parse('$serverBaseUrl/link/initiate'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(requestBody),
      );

      if (kDebugMode) {
        print('Server response status: ${response.statusCode}');
        print('Server response body: ${response.body}');
      }

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseBody = json.decode(response.body);
        if (responseBody['otp'] != null) {
          setState(() {
            _generatedOTP = responseBody['otp'];
            _otpGenerationTime = DateTime.now();
            _otpRemainingTime = const Duration(seconds: 300); // Server OTP TTL is 300s
            _statusMessage = 'OTP generated! Enter this on the other device.';
            _isConnecting = false;
          });
          _startOtpCountdown(); // Start countdown for the new OTP
        } else {
          throw Exception('Server did not return an OTP.');
        }
      } else {
        final Map<String, dynamic> errorBody = json.decode(response.body);
        throw Exception(errorBody['error'] ?? 'Server error: ${response.statusCode}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Failed to generate OTP: $e');
      }
      setState(() {
        _statusMessage = 'Failed to generate OTP: ${e.toString().split(':').first}';
        _isConnecting = false;
        _generatedOTP = null; // Clear OTP on error
      });
      _showError('Failed to generate OTP: ${e.toString().split(':').first}');
    }
  }

  /// Starts a countdown timer for the generated OTP's expiry.
  void _startOtpCountdown() {
    _countdownTimer?.cancel(); // Cancel any existing timer
    _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
      if (!mounted) {
        timer.cancel();
        return;
      }
      final remaining = _otpGenerationTime!.add(const Duration(seconds: 300)).difference(DateTime.now());
      if (remaining.isNegative) {
        timer.cancel();
        setState(() {
          _otpRemainingTime = Duration.zero;
          _statusMessage = 'OTP expired. Generate a new one.';
          _generatedOTP = null; // Clear expired OTP
        });
      } else {
        setState(() {
          _otpRemainingTime = remaining;
        });
      }
    });
  }

  /// Completes the linking process by sending entered OTP to the server.
  Future<void> _completeLinkingWithOTP() async {
    if (_otpController.text.trim().length != 6) {
      _showError('Please enter a valid 6-digit OTP');
      return;
    }

    if (_localKeyPair == null || _localFingerprint == null) {
      _showError('Local device information not loaded.');
      setState(() {
        _isConnecting = false;
        _statusMessage = 'Failed: Local keys not available.';
      });
      return;
    }

    setState(() {
      _isConnecting = true;
      _statusMessage = 'Sending linking request to server...';
    });

    try {
      final localPublicKeyBase64 =
          CryptoUtils.publicKeyToBase64(_localKeyPair!['publicKey']);

      final Map<String, dynamic> requestBody = {
        "otp": _otpController.text.trim(),
        "deviceName": "Android Zapp!", // TODO: Make this dynamic
        "publicKey": localPublicKeyBase64,
        "fingerprint": _localFingerprint!,
      };

      if (kDebugMode) {
        print('Sending /link/complete request: ${json.encode(requestBody)}');
      }

      final response = await http.post(
        Uri.parse('$serverBaseUrl/link/complete'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(requestBody),
      );

      if (kDebugMode) {
        print('Server response status: ${response.statusCode}');
        print('Server response body: ${response.body}');
      }

      if (response.statusCode == 200) {
        final Map<String, dynamic> responseBody = json.decode(response.body);
        if (responseBody['status'] == 'success' &&
            responseBody['linked_devices'] != null) {
          final List<dynamic> linkedDevicesData =
              responseBody['linked_devices'];
          String? remoteFingerprint;

          for (var deviceData in linkedDevicesData) {
            final String fingerprint = deviceData['fingerprint'];
            final String publicKeyBase64 = deviceData['public_key'];
            final String deviceName = deviceData['name'];

            // Save the *other* device's public key and fingerprint
            if (fingerprint != _localFingerprint) {
              final remotePublicKey =
                  CryptoUtils.publicKeyFromBase64(publicKeyBase64);
              final saved = await StorageService.saveLinkedDevice(
                deviceName,
                fingerprint,
                remotePublicKey,
              );
              if (saved) {
                remoteFingerprint = fingerprint;
                if (kDebugMode) {
                  print('Saved remote device: $deviceName ($fingerprint)');
                }
              } else {
                throw Exception('Failed to save remote linked device');
              }
            }
          }

          if (remoteFingerprint != null) {
            setState(() {
              _statusMessage = 'Device linked successfully!';
              _isConnecting = false;
            });
            _showSuccessDialog(remoteFingerprint);
          } else {
            throw Exception(
                'Server did not return expected linked device information.');
          }
        } else {
          throw Exception(responseBody['error'] ?? 'Unknown server response.');
        }
      } else if (response.statusCode == 404) {
        _showError(
            'OTP not found or expired. Please check and try again.');
        setState(() {
          _statusMessage = 'Connection failed: OTP expired or invalid.';
          _isConnecting = false;
        });
      } else {
        final Map<String, dynamic> errorBody = json.decode(response.body);
        throw Exception(
            errorBody['error'] ?? 'Server error: ${response.statusCode}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Connection failed: $e');
      }
      setState(() {
        _statusMessage = 'Connection failed: ${e.toString().split(':').first}';
        _isConnecting = false;
      });
      _showError('Failed to link device: ${e.toString().split(':').first}');
    }
  }

  /// Show error message to user
  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// Show success dialog with device information
  void _showSuccessDialog(String remoteFingerprint) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Device Linked Successfully!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Your device has been successfully linked.'),
            const SizedBox(height: 16),
            Text(
              'Remote Device Fingerprint:',
              style: Theme.of(context).textTheme.titleSmall,
            ),
            const SizedBox(height: 4),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(4),
              ),
              child: SelectableText(
                remoteFingerprint,
                style: const TextStyle(
                  fontFamily: 'monospace',
                  fontSize: 12,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close dialog
              Navigator.of(context)
                  .pop(); // Return to previous screen, or navigate to main Zapp screen
            },
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final minutes = _otpRemainingTime.inMinutes;
    final seconds = _otpRemainingTime.inSeconds % 60;
    final countdownString = (minutes > 0 || seconds > 0)
        ? 'OTP expires in ${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}'
        : 'OTP expired';

    return Scaffold(
      appBar: AppBar(
        title: const Text('Link Device'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.blue.shade200),
              ),
              child: Column(
                children: [
                  Icon(
                    Icons.link,
                    size: 48,
                    color: Colors.blue.shade600,
                  ),
                  const SizedBox(height: 12),
                  Text(
                    'Device Linking',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.blue.shade800,
                        ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    _currentMode == _LinkMode.enterOtp
                        ? 'Enter the OTP from the other device (e.g., browser extension) to establish a secure connection.'
                        : 'Share this OTP with the other device and enter your fingerprint there.',
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Status Message
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _isConnecting
                    ? Colors.orange.shade50
                    : Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: _isConnecting
                      ? Colors.orange.shade200
                      : Colors.green.shade200,
                ),
              ),
              child: Row(
                children: [
                  _isConnecting
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : Icon(
                          Icons.info,
                          color: _isConnecting ? Colors.orange : Colors.green,
                        ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      _statusMessage,
                      style: TextStyle(
                        color: _isConnecting
                            ? Colors.orange.shade800
                            : Colors.green.shade800,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Local Device Fingerprint
            if (_localFingerprint != null) ...[
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.fingerprint, color: Colors.grey.shade600),
                        const SizedBox(width: 8),
                        Text(
                          'Your Device Fingerprint',
                          style:
                              Theme.of(context).textTheme.titleSmall?.copyWith(
                                    fontWeight: FontWeight.bold,
                                  ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(color: Colors.grey.shade300),
                      ),
                      child: SelectableText(
                        _localFingerprint!,
                        style: const TextStyle(
                          fontFamily: 'monospace',
                          fontSize: 12,
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'This fingerprint uniquely identifies your device. You will use it to verify the connection on the other device.',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade600,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
            ],

            // Conditional UI based on mode (_LinkMode.enterOtp or _LinkMode.generateOtp)
            if (_currentMode == _LinkMode.enterOtp) ...[
              // OTP Input
              TextField(
                controller: _otpController,
                decoration: const InputDecoration(
                  labelText: 'Enter OTP',
                  hintText: '123456',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.lock),
                ),
                keyboardType: TextInputType.number,
                maxLength: 6,
                inputFormatters: [
                  FilteringTextInputFormatter.digitsOnly,
                ],
                textAlign: TextAlign.center,
                style: const TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 8,
                ),
                enabled: !_isConnecting,
              ),

              const SizedBox(height: 24),

              // Connect Button
              ElevatedButton.icon(
                onPressed: _isConnecting ? null : _completeLinkingWithOTP,
                icon: _isConnecting
                    ? const SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Icon(Icons.link),
                label: Text(_isConnecting ? 'Connecting...' : 'Connect Device'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  textStyle:
                      const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                ),
              ),

              const SizedBox(height: 20),

              // Switch to Generate OTP Link
              TextButton(
                onPressed: _isConnecting
                    ? null
                    : () {
                        setState(() {
                          _currentMode = _LinkMode.generateOtp;
                          _otpController.clear(); // Clear input if switching
                          _statusMessage = 'Requesting OTP...'; // Update status
                        });
                        _generateAndDisplayOTP(); // Start OTP generation
                      },
                child: const Text('Generate an OTP on this device instead?'),
              ),
            ] else ...[ // _currentMode == _LinkMode.generateOtp
              // Display Generated OTP
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.amber.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.amber.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.code, color: Colors.amber.shade700),
                        const SizedBox(width: 8),
                        Text(
                          'Generated OTP',
                          style:
                              Theme.of(context).textTheme.titleSmall?.copyWith(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.amber.shade800,
                                  ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(color: Colors.amber.shade300),
                      ),
                      child: _generatedOTP != null
                          ? SelectableText(
                              _generatedOTP!,
                              textAlign: TextAlign.center,
                              style: const TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 32,
                                fontWeight: FontWeight.bold,
                                letterSpacing: 6,
                              ),
                            )
                          : const Center(child: CircularProgressIndicator()),
                    ),
                    const SizedBox(height: 8),
                    Align(
                      alignment: Alignment.center,
                      child: Text(
                        _generatedOTP != null
                            ? countdownString // Display countdown if OTP is generated
                            : 'Waiting for server...',
                        style: TextStyle(
                          fontSize: 12,
                          color: (_otpRemainingTime.inSeconds <= 60 && _otpRemainingTime.inSeconds > 0)
                            ? Colors.red.shade600 // Red if less than 60 seconds
                            : Colors.amber.shade700,
                          fontStyle: FontStyle.italic,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),

              // Back to Enter OTP Link
              TextButton(
                onPressed: _isConnecting
                    ? null
                    : () {
                        _countdownTimer?.cancel(); // Cancel timer
                        setState(() {
                          _currentMode = _LinkMode.enterOtp;
                          _generatedOTP = null; // Clear generated OTP
                          _otpGenerationTime = null;
                          _otpRemainingTime = Duration.zero;
                          _statusMessage = 'Enter OTP from the other device.'; // Reset status
                          _isConnecting = false; // Reset connecting state
                          _otpController.clear();
                        });
                      },
                child: const Text('Go back to enter an OTP'),
              ),
            ],
          ],
        ),
      ),
    );
  }
}

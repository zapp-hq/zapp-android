import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:math';
import 'crypto_utils.dart';
import 'storage_service.dart';

/// OTP Entry Screen for linking devices using temporary codes
/// Handles secure device pairing with public key exchange
class OTPEntryScreen extends StatefulWidget {
  const OTPEntryScreen({super.key});

  @override
  State<OTPEntryScreen> createState() => _OTPEntryScreenState();
}

class _OTPEntryScreenState extends State<OTPEntryScreen> {
  final TextEditingController _otpController = TextEditingController();
  bool _isConnecting = false;
  String _statusMessage = 'Ready to connect';
  String? _localFingerprint;
  String? _generatedOTP;

  @override
  void initState() {
    super.initState();
    _loadLocalFingerprint();
    _generateOTP();
  }

  /// Load local device fingerprint for display
  Future<void> _loadLocalFingerprint() async {
    try {
      final keyPair = await StorageService.loadKeyPair();
      if (keyPair != null) {
        setState(() {
          _localFingerprint = keyPair['fingerprint'] as String;
        });
      } else {
        setState(() {
          _statusMessage =
              'Error: No local keys found. Please return to setup.';
        });
      }
    } catch (e) {
      setState(() {
        _statusMessage = 'Error loading local keys: \$e';
      });
    }
  }

  /// Generate a 6-digit OTP for this session
  /// In production, this would be generated by the server
  void _generateOTP() {
    final random = Random.secure();
    final otp = (100000 + random.nextInt(900000)).toString();
    setState(() {
      _generatedOTP = otp;
    });
  }

  /// Simulate device linking process with OTP verification
  /// **CRITICAL PLACEHOLDER**: This needs native Android implementation
  Future<void> _performDeviceLinking() async {
    if (_otpController.text.trim().length != 6) {
      _showError('Please enter a valid 6-digit OTP');
      return;
    }

    setState(() {
      _isConnecting = true;
      _statusMessage = 'Verifying OTP and exchanging keys...';
    });

    try {
      // **NATIVE INTEGRATION REQUIRED:**
      // The following process needs to be implemented with native Android code
      // using HTTP client for server communication:

      // 1. Send OTP and local public key to server
      final localKeyPair = await StorageService.loadKeyPair();
      if (localKeyPair == null) {
        throw Exception('Local keys not found');
      }

      final localPublicKey = localKeyPair['publicKey'];
      final localPublicKeyBase64 =
          CryptoUtils.publicKeyToBase64(localPublicKey);

      if (kDebugMode) {
        print('=== DEVICE LINKING SIMULATION ===');
      }
      if (kDebugMode) {
        print('Local Device Fingerprint: \$_localFingerprint');
      }
      if (kDebugMode) {
        print('Generated OTP: \$_generatedOTP');
      }
      if (kDebugMode) {
        print('Entered OTP: \${_otpController.text}');
      }
      if (kDebugMode) {
        print(
          'Local Public Key (Base64): \${localPublicKeyBase64.substring(0, 50)}...');
      }

      // **PLACEHOLDER**: Server communication would happen here
      /*
      NATIVE ANDROID IMPLEMENTATION NEEDED:
      
      HTTP POST to server endpoint with:
      {
        "otp": enteredOTP,
        "deviceName": "Flutter Device",
        "publicKey": localPublicKeyBase64,
        "fingerprint": localFingerprint
      }
      
      Server responds with:
      {
        "success": true,
        "remoteDevice": {
          "name": "Remote Device Name",
          "publicKey": "base64EncodedRemotePublicKey",
          "fingerprint": "remoteDeviceFingerprint"
        }
      }
      */

      // Simulate server response delay
      await Future.delayed(const Duration(seconds: 2));

      // For demonstration, simulate successful linking with mock data
      if (_otpController.text == _generatedOTP) {
        // Mock remote device data that would come from server
        final mockRemotePublicKeyBase64 = await _generateMockRemoteDevice();
        final mockRemotePublicKey =
            CryptoUtils.publicKeyFromBase64(mockRemotePublicKeyBase64);
        final mockRemoteFingerprint =
            CryptoUtils.generateFingerprint(mockRemotePublicKey);

        // Save the linked device
        final saved = await StorageService.saveLinkedDevice(
          'Mock Remote Device',
          mockRemoteFingerprint,
          mockRemotePublicKey,
        );

        if (saved) {
          setState(() {
            _statusMessage = 'Device linked successfully!';
            _isConnecting = false;
          });

          // Show success dialog
          _showSuccessDialog(mockRemoteFingerprint);
        } else {
          throw Exception('Failed to save linked device');
        }
      } else {
        throw Exception('Invalid OTP. Please check and try again.');
      }
    } catch (e) {
      setState(() {
        _statusMessage = 'Connection failed: \$e';
        _isConnecting = false;
      });
      _showError('Failed to link device: \$e');
    }
  }

  /// Generate mock remote device for demonstration
  /// In production, this data comes from the server
  Future<String> _generateMockRemoteDevice() async {
    // Generate a mock key pair for the "remote" device
    final mockKeyPair = CryptoUtils.generateKeyPair();
    return CryptoUtils.publicKeyToBase64(mockKeyPair.publicKey);
  }

  /// Show error message to user
  void _showError(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  /// Show success dialog with device information
  void _showSuccessDialog(String remoteFingerprint) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Device Linked Successfully!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Your device has been successfully linked.'),
            const SizedBox(height: 16),
            Text(
              'Remote Device Fingerprint:',
              style: Theme.of(context).textTheme.titleSmall,
            ),
            const SizedBox(height: 4),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(4),
              ),
              child: SelectableText(
                remoteFingerprint,
                style: const TextStyle(
                  fontFamily: 'monospace',
                  fontSize: 12,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Close dialog
              Navigator.of(context).pop(); // Return to previous screen
            },
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Link Device'),
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Header
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.blue.shade50,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.blue.shade200),
              ),
              child: Column(
                children: [
                  Icon(
                    Icons.link,
                    size: 48,
                    color: Colors.blue.shade600,
                  ),
                  const SizedBox(height: 12),
                  Text(
                    'Device Linking',
                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.blue.shade800,
                        ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    'Enter the OTP from the other device to establish a secure connection',
                    textAlign: TextAlign.center,
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Status Message
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: _isConnecting
                    ? Colors.orange.shade50
                    : Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(
                  color: _isConnecting
                      ? Colors.orange.shade200
                      : Colors.green.shade200,
                ),
              ),
              child: Row(
                children: [
                  _isConnecting
                      ? const SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : Icon(
                          Icons.info,
                          color: _isConnecting ? Colors.orange : Colors.green,
                        ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Text(
                      _statusMessage,
                      style: TextStyle(
                        color: _isConnecting
                            ? Colors.orange.shade800
                            : Colors.green.shade800,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // Local Device Fingerprint
            if (_localFingerprint != null) ...[
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.grey.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.grey.shade300),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.fingerprint, color: Colors.grey.shade600),
                        const SizedBox(width: 8),
                        Text(
                          'Your Device Fingerprint',
                          style:
                              Theme.of(context).textTheme.titleSmall?.copyWith(
                                    fontWeight: FontWeight.bold,
                                  ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(color: Colors.grey.shade300),
                      ),
                      child: SelectableText(
                        _localFingerprint!,
                        style: const TextStyle(
                          fontFamily: 'monospace',
                          fontSize: 12,
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Share this fingerprint with the other device for verification',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade600,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
            ],

            // Demo OTP Display (for testing)
            if (_generatedOTP != null) ...[
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.amber.shade50,
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.amber.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.code, color: Colors.amber.shade700),
                        const SizedBox(width: 8),
                        Text(
                          'Demo OTP (for testing)',
                          style:
                              Theme.of(context).textTheme.titleSmall?.copyWith(
                                    fontWeight: FontWeight.bold,
                                    color: Colors.amber.shade800,
                                  ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(4),
                        border: Border.all(color: Colors.amber.shade300),
                      ),
                      child: Text(
                        _generatedOTP!,
                        style: const TextStyle(
                          fontFamily: 'monospace',
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'In production, this OTP would be generated by the server and displayed on the other device',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.amber.shade700,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
            ],

            // OTP Input
            TextField(
              controller: _otpController,
              decoration: const InputDecoration(
                labelText: 'Enter OTP',
                hintText: '123456',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.lock),
              ),
              keyboardType: TextInputType.number,
              maxLength: 6,
              inputFormatters: [
                FilteringTextInputFormatter.digitsOnly,
              ],
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                letterSpacing: 8,
              ),
              enabled: !_isConnecting,
            ),

            const SizedBox(height: 24),

            // Connect Button
            ElevatedButton.icon(
              onPressed: _isConnecting ? null : _performDeviceLinking,
              icon: _isConnecting
                  ? const SizedBox(
                      width: 16,
                      height: 16,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : const Icon(Icons.link),
              label: Text(_isConnecting ? 'Connecting...' : 'Connect Device'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                textStyle:
                    const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
            ),

            const SizedBox(height: 32),

            // Native Integration Information
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.red.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red.shade200),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.warning, color: Colors.red.shade600),
                      const SizedBox(width: 8),
                      Text(
                        'Native Integration Required',
                        style: Theme.of(context).textTheme.titleSmall?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: Colors.red.shade800,
                            ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'For production deployment, this screen requires:\\n'
                    '• HTTP client for server communication\\n'
                    '• OTP verification with timeout handling\\n'
                    '• Public key exchange validation\\n'
                    '• Error handling for network failures',
                    style: TextStyle(
                      color: Colors.red.shade700,
                      fontSize: 13,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _otpController.dispose();
    super.dispose();
  }
}
